let USERS,USERS_HASH,nodemailer,generate_random_string,verification;_204‍.x([["signup",()=>signup],["login",()=>login],["user",()=>user],["send_mail",()=>send_mail],["verify_email",()=>verify_email],["to_title",()=>to_title]]);_204‍.w("../ds/conn",[["USERS",["USERS"],function(v){USERS=v}],["USERS_HASH",["USERS_HASH"],function(v){USERS_HASH=v}]]);_204‍.w("nodemailer",[["default",["nodemailer"],function(v){nodemailer=v}]]);_204‍.w("generalised-datastore/utils/functions",[["generate_random_string",["generate_random_string"],function(v){generate_random_string=v}]]);_204‍.w("./emails",[["verification",["verification"],function(v){verification=v}]]);




let email_verification_codes = new Object();

const to_title = (string) => {
  if (!string) return string;

  let str = "";
  string.split(" ").map((s) => {
    if (s) str += " " + s[0].toUpperCase() + s.slice(1);
  });
  return str.trim();
};

const send_mail = ({
  recipient,
  recipient_name,
  sender_pass,
  sender_name,
  sender,
  subject,
  text,
  html,
  to,
}) => {
  let transporter = nodemailer.createTransport({
    host: "premium217.web-hosting.com",
    port: 465,
    secure: true,
    auth: {
      user: sender,
      pass: sender_pass,
    },
  });

  transporter.sendMail({
    from: `${sender_name} <${sender}>`,
    to: to || `${recipient_name} <${recipient}>`,
    subject,
    text,
    html,
  });
};

const signup = (req, res) => {
  let user = req.body;

  let key = user.password;
  delete user.password;
  user.email = user.email.toLowerCase().trim();

  let user_exists = USERS.readone({ email: user.email });
  if (user_exists && user_exists.verified)
    return res.json({
      ok: false,
      message: "user exists",
      data: "email already used.",
    });

  if (user_exists) {
    user._id = user_exists._id;

    USERS_HASH.update({ user: user._id }, { key });
  } else {
    let result = USERS.write(user);
    user._id = result._id;
    user.created = result.created;

    USERS_HASH.write({ user: user._id, key });
  }

  let code = generate_random_string(6);
  email_verification_codes[user.email] = code;

  send_mail({
    recipient: user.email,
    recipient_name: "",
    subject: "[QNA] Please verify your email",
    sender: "signup@giitafrica.com",
    sender_name: "QNA",
    sender_pass: "signupgiitafrica",
    html: verification(code, ""),
  });

  res.json({
    ok: true,
    message: "user signup",
    data: { email: user.email, _id: user._id },
  });
};

const user = (req, res) => {
  let { user_id } = req.params;

  res.json({ ok: true, message: "user fetched", data: USERS.readone(user_id) });
};

const verify_email = (req, res) => {
  let { email, verification_code } = req.body;
  email = email && email.trim().toLowerCase();
  verification_code = verification_code && verification_code.trim();

  let code = email_verification_codes[email];

  if (!code || code !== verification_code)
    return res.json({
      ok: false,
      message: "",
      data: "Email verification failed.",
    });

  let user = USERS.readone({ email });
  USERS.update(user._id, { verified: true });
  delete email_verification_codes[email];

  res.json({ ok: true, message: "user email verified", data: user });
};

const login = (req, res) => {
  let { email, password } = req.body;

  let user = USERS.readone({ email: email.toLowerCase() });
  if (!user)
    return res.json({
      ok: false,
      message: "user not found",
      data: "User not found",
    });

  let user_hash = USERS_HASH.readone({ user: user._id });
  if (!user_hash || (user_hash && user_hash.key !== password))
    return res.json({
      ok: false,
      message: "invalid password",
      data: "Invalid password",
    });

  res.json({ ok: true, message: "user logged-in", data: user });
};


