let EBOOKS,GLOBALS,certificate_joins,site_metric,save_file,save_image;_cb7‍.x([["upload_ebook",()=>upload_ebook],["ebooks",()=>ebooks],["ebook",()=>ebook],["search_ebooks",()=>search_ebooks]]);_cb7‍.w("../ds/conn",[["EBOOKS",["EBOOKS"],function(v){EBOOKS=v}],["GLOBALS",["GLOBALS"],function(v){GLOBALS=v}]]);_cb7‍.w("./exams",[["certificate_joins",["certificate_joins"],function(v){certificate_joins=v}]]);_cb7‍.w("./starter",[["site_metric",["site_metric"],function(v){site_metric=v}]]);_cb7‍.w("./utils",[["save_file",["save_file"],function(v){save_file=v}],["save_image",["save_image"],function(v){save_image=v}]]);




const upload_ebook = (req, res) => {
  let {
    book,
    title,
    vendor,
    certificate,
    description,
    price,
    cover_hash,
    cover,
  } = req.body;

  cover = save_image(cover);
  book = save_file(book, `${title.replace(/ /g, "_")}.pdf`);

  let result = EBOOKS.write({
    title,
    description,
    price,
    cover,
    cover_hash,
    vendor,
    certificate,
    book,
  });

  _cb7‍.g.console.log(GLOBALS.update({ global: site_metric }, { ebooks: { $inc: 1 } }));

  res.json({
    ok: true,
    message: "ebook uploaded",
    data: { _id: result._id, created: result.created, cover, book },
  });
};

const ebooks = (req, res) => {
  let { limit } = req.params;

  res.json({
    ok: true,
    message: "ebooks",
    data: certificate_joins(
      EBOOKS.read(limit === "free" ? { price: 0 } : null, {
        limit: Number(limit),
      })
    ),
  });
};

const search_ebooks = (req, res) => {
  let { query, free } = req.body;

  res.json({
    ok: true,
    message: "ebooks result",
    data: certificate_joins(
      EBOOKS.read(free ? { price: 0 } : null, { search_param: query })
    ),
  });
};

const ebook = (req, res) => {
  let { ebook: ebook_id } = req.params;

  res.json({
    ok: true,
    message: "ebook",
    data: certificate_joins(new Array(EBOOKS.readone(ebook_id)))[0],
  });
};


